{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\plantmanager-app\\\\src\\\\pages\\\\PlantSelect.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { EnvironmentButton } from \"../components/EnvironmentButton\";\nimport { Header } from \"../components/Header\";\nimport { PlantCardPrimary } from \"../components/PlandCardPrimary\";\nimport api from \"../services/api\";\nimport colors from \"../styles/colors\";\nimport fonts from \"../styles/fonts\";\nexport function PlantSelect() {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      environment = _useState2[0],\n      setEnvironment = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      plants = _useState4[0],\n      setPlants = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      filteredPlants = _useState6[0],\n      setFilteredPlants = _useState6[1];\n\n  var _useState7 = useState(\"all\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      environmentSelected = _useState8[0],\n      setEnvironmentSelected = _useState8[1];\n\n  function handleEnvironmentSelected(environment) {\n    setEnvironmentSelected(environment);\n\n    if (environment === 'all') {\n      return setFilteredPlants(plants);\n    }\n\n    var filtered = plants.filter(function (plant) {\n      return plant.environments.includes(environment);\n    });\n    setFilteredPlants(filtered);\n  }\n\n  useEffect(function () {\n    function fetchEnvironment() {\n      var _await$api$get, data;\n\n      return _regeneratorRuntime.async(function fetchEnvironment$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(api.get(\"plants_environments?_sort=title&_order_asc\"));\n\n            case 2:\n              _await$api$get = _context.sent;\n              data = _await$api$get.data;\n              setEnvironment([{\n                key: \"all\",\n                title: \"Todos\"\n              }].concat(_toConsumableArray(data)));\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchEnvironment();\n  });\n  useEffect(function () {\n    function fetchPlants() {\n      var _await$api$get2, data;\n\n      return _regeneratorRuntime.async(function fetchPlants$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(api.get(\"plants?_sort=name&_order=asc\"));\n\n            case 2:\n              _await$api$get2 = _context2.sent;\n              data = _await$api$get2.data;\n              setPlants(data);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchPlants();\n  });\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    style: styles.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, \"Em qual ambiente\"), React.createElement(Text, {\n    style: styles.subtitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"voc\\xEA quer colocar sua planta?\")), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, React.createElement(FlatList, {\n    data: environment,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(EnvironmentButton, {\n        title: item.title,\n        active: item.key === environmentSelected,\n        onPress: function onPress() {\n          return handleEnvironmentSelected(item.key);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      });\n    },\n    horizontal: true,\n    showsHorizontalScrollIndicator: false,\n    contentContainerStyle: styles.environmentList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })), React.createElement(View, {\n    style: styles.plants,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, React.createElement(FlatList, {\n    data: filteredPlants,\n    showsVerticalScrollIndicator: false,\n    numColumns: 2,\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(PlantCardPrimary, {\n        data: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 37\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: colors.background\n  },\n  header: {\n    paddingHorizontal: 30\n  },\n  title: {\n    fontSize: 17,\n    color: colors.heading,\n    fontFamily: fonts.heading,\n    lineHeight: 20,\n    marginTop: 15\n  },\n  subtitle: {\n    fontFamily: fonts.text,\n    fontSize: 17,\n    lineHeight: 20,\n    color: colors.heading\n  },\n  environmentList: {\n    height: 40,\n    justifyContent: \"center\",\n    paddingBottom: 5,\n    marginLeft: 32,\n    marginVertical: 32\n  },\n  plants: {\n    flex: 1,\n    paddingHorizontal: 32,\n    justifyContent: \"center\"\n  }\n});","map":{"version":3,"sources":["C:/Users/User/OneDrive/√Årea de Trabalho/plantmanager-app/src/pages/PlantSelect.tsx"],"names":["React","useState","useEffect","EnvironmentButton","Header","PlantCardPrimary","api","colors","fonts","PlantSelect","environment","setEnvironment","plants","setPlants","filteredPlants","setFilteredPlants","environmentSelected","setEnvironmentSelected","handleEnvironmentSelected","filtered","filter","plant","environments","includes","fetchEnvironment","get","data","key","title","fetchPlants","styles","container","header","subtitle","item","environmentList","StyleSheet","create","flex","backgroundColor","background","paddingHorizontal","fontSize","color","heading","fontFamily","lineHeight","marginTop","text","height","justifyContent","paddingBottom","marginLeft","marginVertical"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { View, Text, StyleSheet, FlatList } from \"react-native\";\r\nimport { EnvironmentButton } from \"../components/EnvironmentButton\";\r\nimport { Header } from \"../components/Header\";\r\nimport { PlantCardPrimary } from \"../components/PlandCardPrimary\";\r\n\r\nimport api from \"../services/api\";\r\nimport colors from \"../styles/colors\";\r\nimport fonts from \"../styles/fonts\";\r\n\r\nexport function PlantSelect() {\r\n  const [environment, setEnvironment] = useState<EnvironmentProps[]>([]);\r\n  const [plants, setPlants] = useState<PlantProps[]>([]);\r\n  const [filteredPlants, setFilteredPlants] = useState<PlantProps[]>([]);\r\n  const [environmentSelected, setEnvironmentSelected] = useState(\"all\");\r\n\r\n  function handleEnvironmentSelected(environment: string) {\r\n    setEnvironmentSelected(environment);\r\n\r\n    if(environment === 'all') {\r\n      return setFilteredPlants(plants);\r\n    }  \r\n\r\n    const filtered = plants.filter(plant => plant.environments.includes(environment));\r\n\r\n    setFilteredPlants(filtered)\r\n  }\r\n\r\n \r\n  interface EnvironmentProps {\r\n    key: string;\r\n    title: string;\r\n  }\r\n\r\n  interface PlantProps {\r\n    id: string;\r\n    name: string;\r\n    about: string;\r\n    water_tips: string;\r\n    photo: string;\r\n    environments: [string];\r\n    frequency: {\r\n      times: number;\r\n      repeat_every: string;\r\n    };\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function fetchEnvironment() {\r\n      const { data } = await api.get(\r\n        \"plants_environments?_sort=title&_order_asc\"\r\n      );\r\n      setEnvironment([{ key: \"all\", title: \"Todos\" }, ...data]);\r\n    }\r\n    fetchEnvironment();\r\n  });\r\n\r\n  useEffect(() => {\r\n    async function fetchPlants() {\r\n      const { data } = await api.get(\"plants?_sort=name&_order=asc\");\r\n      setPlants(data);\r\n    }\r\n    fetchPlants();\r\n  });\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.header}>\r\n        <Header />\r\n        <Text style={styles.title}>Em qual ambiente</Text>\r\n        <Text style={styles.subtitle}>voc√™ quer colocar sua planta?</Text>\r\n      </View>\r\n      <View>\r\n        <FlatList\r\n          data={environment}\r\n          renderItem={({ item }) => (\r\n            <EnvironmentButton\r\n              title={item.title}\r\n              active={item.key === environmentSelected}\r\n              onPress={() => handleEnvironmentSelected(item.key)}\r\n            />\r\n          )}\r\n          horizontal\r\n          showsHorizontalScrollIndicator={false}\r\n          contentContainerStyle={styles.environmentList}\r\n        />\r\n      </View>\r\n      <View style={styles.plants}>\r\n        <FlatList\r\n          data={filteredPlants}\r\n          showsVerticalScrollIndicator={false}\r\n          numColumns={2}\r\n          renderItem={({ item }) => <PlantCardPrimary data={item} />}\r\n        ></FlatList>\r\n      </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: colors.background,\r\n  },\r\n\r\n  header: {\r\n    paddingHorizontal: 30,\r\n  },\r\n\r\n  title: {\r\n    fontSize: 17,\r\n    color: colors.heading,\r\n    fontFamily: fonts.heading,\r\n    lineHeight: 20,\r\n    marginTop: 15,\r\n  },\r\n\r\n  subtitle: {\r\n    fontFamily: fonts.text,\r\n    fontSize: 17,\r\n    lineHeight: 20,\r\n    color: colors.heading,\r\n  },\r\n\r\n  environmentList: {\r\n    height: 40,\r\n    justifyContent: \"center\",\r\n    paddingBottom: 5,\r\n    marginLeft: 32,\r\n    marginVertical: 32,\r\n  },\r\n\r\n  plants: {\r\n    flex: 1,\r\n    paddingHorizontal: 32,\r\n    justifyContent: \"center\",\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}